#!/usr/bin/env bash

set -euo pipefail

main() {
	local output exit_code

	local config_file=/config/eslint/eslintrc.json
	local ignore_file=/config/eslint/eslintignore
	local allowed_pattern

	output="$(mktemp)"

	echo '~~~ Software versions'
	echo '$ eslint --version'
	eslint --version

	echo '~~~ Checking configuration'

	if [ ! -f "${config_file}" ]; then
		echo 'INFO: no configuration file; skipping"'
		return 7
	fi

	if ! jq -re '.' "${config_file}" 2> "${output}" > /dev/null; then
		echo "ERROR: ${config_file} is not valid JSON"
		cat "${output}"
		return 1
	fi

	echo '~~~ Preparing configuration'

	local -a args=(-c "${config_file}" -f json --output-file "${output}")

	echo '~~~ Checking for vue plugin'
	if jq -re '.plugins[]' "${config_file}" 2> /dev/null | grep -qF 'vue'; then
		echo 'INFO: found vue plugin'
		args+=( --ext .vue )
		allowed_pattern='\.(js|vue)$'
	else
		echo 'INFO: vue plugin not found'
		allowed_pattern='\.js'
	fi

	if [ -f "${ignore_file}" ]; then
		echo 'INFO: found ignore configuration file'
		args+=(--ignore-path "${ignore_file}")
	fi

	echo '~~~ Preparing file list'
	if [ -f ".teamci_test_files" ]; then
		if grep -qE "${allowed_pattern}" .teamci_test_files; then
			echo 'INFO: selecting files for eslint'
			while read -r file; do
				args+=( "${file}" )
			done < <(grep -E "${allowed_pattern}" .teamci_test_files)
		else
			echo 'INFO: no supported files included in list; skipping'
			return 7
		fi
	else
		echo 'INFO: test files in the current directory'
		args+=( "." )
	fi

	echo '~~~ Running eslint'
	set +e
	eslint "${args[@]}"
	exit_code=$?
	set -e

	if [ "$(cat "${output}")" = "[]" ]; then
		echo "INFO: no lintable files found; skipping"
		return 7
	fi

	tapify.rb < "${output}"

	if [ "${exit_code}" -eq 0 ]; then
		return 0
	else
		return 1
	fi
}

main "$@"
