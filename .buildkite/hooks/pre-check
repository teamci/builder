#!/usr/bin/env bash

set -euo pipefail

get_access_token() {
	local scratch
	scratch="$(mktemp)"

	echo '~~~ :json: Fetching Access Token'
	access_token_url="$(buildkite-agent meta-data get teamci.access_token_url)"
	if curl -o "${scratch}" --fail -H 'Accept: application/json' "${access_token_url}"; then
		echo 'INFO: retrieved git access token'
		export "ACCESS_TOKEN=$(jq -re '.token' "${scratch}")"
	else
		echo 'FATAL: Could not fetch clone access token. This is an internal error. You can attempt a retry.'
		echo 'WARN: Skipping this check for now. Contact support if this continues.'
		return 7
	fi
}

sync_code() {
	echo '~~~ :git: Cloning code'
	local repo head_sha head_branch

	repo="$(buildkite-agent meta-data get teamci.repo.slug)"
	head_sha="$(buildkite-agent meta-data get teamci.head_sha)"
	head_branch="$(buildkite-agent meta-data get teamci.head_branch)"

	if [ -z "${repo}" ] || [ -z "${head_sha}" ] || [ -z "${head_branch}" ]; then
		echo "FATAL: Missing repo/sha/branch metadata" 1>&2
		return 1
	fi

	export CODE_DIR="${TEAMCI_CODE_DIR}/${repo}"
	export TEAMCI_REPO_SLUG="${repo}"
	export TEAMCI_COMMIT="${head_sha}"

	if [ -d "${CODE_DIR}/.git" ]; then
		echo '~~~ :git: Updating origin with access token'
		pushd "${CODE_DIR}" > /dev/null

		git remote set-url origin "https://x-access-token:${ACCESS_TOKEN}@github.com/${repo}.git"
	else
		echo "~~~ :git: Cloning ${repo}"
		mkdir -p "${CODE_DIR}"

		git clone -v "https://x-access-token:${ACCESS_TOKEN}@github.com/${repo}.git" "${CODE_DIR}"

		pushd "${CODE_DIR}" > /dev/null
	fi

	echo '~~~ :git: Checking out'

	if git fetch -v --prune origin "${head_branch}" && git checkout -f "${head_sha}"; then
		git clean -fdx
		echo "INFO: code ${head_branch} @ ${head_sha} ready"
		popd > /dev/null
	else
		echo "WARN: could not sync code. Was the branch deleted upstream? Skipping check."
		return 7
	fi
}

sync_config() {
	echo "~~~ :git: Syncing config repo"

	local config_repo config_branch clone_status

	config_repo="$(buildkite-agent meta-data get teamci.config.repo)"
	config_branch="$(buildkite-agent meta-data get teamci.config.branch)"

	export TEAMCI_CONFIG_REPO_SLUG="${config_repo}"
	export CONFIG_DIR="${TEAMCI_CODE_DIR}/${config_repo}"

	if [ -d "${CONFIG_DIR}/.git" ]; then
		pushd "${CONFIG_DIR}" > /dev/null

		git remote set-url origin "https://x-access-token:${ACCESS_TOKEN}@github.com/${config_repo}.git"
		git fetch -v --prune origin "${config_branch}"
		git checkout -f "${config_branch}"
		git pull origin "${config_branch}"

		popd > /dev/null

		echo "INFO: synced shared configuration from ${config_repo}"
	else
		mkdir -p "${CODE_DIR}"

		set +e
		git clone -v "https://x-access-token:${ACCESS_TOKEN}@github.com/${config_repo}.git" "${CONFIG_DIR}"
		clone_status=$?
		set -e

		if [ $clone_status -ne 0 ]; then
			echo "WARN: Could not clone ${config_repo}. Using default config."
		else
			pushd "${CONFIG_DIR}" > /dev/null

			git fetch -v --prune origin "${config_branch}"
			git checkout -f "${config_branch}"

			popd > /dev/null

			echo "INFO: synced shared configuration from ${config_repo}"
		fi
	fi
}

generate_file_list() {
	echo "~~~ :git: Generate list of test files"

	if buildkite-agent meta-data get 'teamci.check_suite.files' | jq -re '.[]' &> /dev/null; then
		local -a files=()
		echo "INFO: Found list of possible files"

		while read -r path; do
			if [ -f "${CODE_DIR}/${path}" ]; then
				files+=( "${path}" )
			else
				echo "WARN: ${path} does not exist"
			fi
		done < <(buildkite-agent meta-data get 'teamci.check_suite.files' | jq -re '.[]')

		if [ ${#files[@]} -gt 0 ]; then
			for path in "${files[@]}"; do
				echo "${path}" >> "${CODE_DIR}/.teamci_test_files"
			done

			cat "${CODE_DIR}/.teamci_test_files"
		fi
	else
		echo 'INFO: No file list specified. Testing all files.'
	fi
}

docker_pull() {
	if [ "${BUILDKITE_LABEL}" = 'custom' ]; then
		# skip this; no docker-compose entry
		return 0
	else
		echo '~~~ :docker: Pulling image'
		docker-compose pull "${BUILDKITE_LABEL}"
	fi
}

set_title() {
	echo '~~~~ :house_with_garden: Setting title'

	buildkite-agent meta-data set \
		"teamci.${BUILDKITE_LABEL}.title" \
		"$(jq -re ".${BUILDKITE_LABEL}" titles.json)"
}

if [ "${BUILDKITE_LABEL}" != ":pipeline:" ]; then
	get_access_token
	sync_code
	sync_config
	generate_file_list

	set_title

	if [ -n "${CI:-}" ]; then
		docker_pull
	fi
fi
