#!/usr/bin/env bash

set -euo pipefail

run_command() {
	echo "$ $*"
	# shellcheck disable=SC2068
	$@
}

main() {
	local output exit_code

	local config_file=/config/gometalinter/config.json
	local -a args=(--json --skip vendor)
	local allowed_pattern='\.go$'

	echo '~~~ Software versions'
	run_command go version
	run_command gometalinter --version
	run_command git --version
	run_command hg --version
	run_command bzr --version
	run_command svn --version

	output="$(mktemp)"

	echo '~~~ Preparing configuration options'

	if [ ! -f "${config_file}" ]; then
		echo 'INFO: no configuration file. Using defaults'.
	else
		echo 'INFO: found configuration file'
		args+=(--config "${config_file}")
	fi

	echo '~~~ Preparing file list'

	if [ -f ".teamci_test_files" ]; then
		if grep -qE "${allowed_pattern}" .teamci_test_files; then
			echo 'INFO: selecting files for gotmetalinter'
			while read -r file; do
				args+=( "${file}" )
			done < <(grep -E "${allowed_pattern}" .teamci_test_files | xargs dirname | sort -u)
		else
			echo 'INFO: no testable files found in list; skipping'
			return 7
		fi
	else
		echo 'INFO: using recursive glob ./...'
		args+=( "./..." )
	fi

	echo '~~~ Preparing code for GOPATH'
	mkdir -p "${GOPATH}/src/github.com/${TEAMCI_REPO_SLUG}"
	cp -r . "${GOPATH}/src/github.com/${TEAMCI_REPO_SLUG}"
	pushd "${GOPATH}/src/github.com/${TEAMCI_REPO_SLUG}" > /dev/null

	echo '~~~ Preparing dependencies'
	if [ -x .teamci/gometalinter/deps ]; then
		echo 'INFO: running provided deps install script'
		.teamci/gometalinter/deps
	else
		echo 'WARN: no deps script provided; linters may fail do to missing dependencies'
	fi

	echo '~~~ Running gometalinter'
	echo "$ gometalinter ${args[*]}"

	set +e
	gometalinter "${args[@]}" > "${output}"
	exit_code=$?
	set -e

	popd > /dev/null

	if [ "${exit_code}" -ne 0 ]; then
		tapify.rb < "${output}"
		return 1
	else
		return 0
	fi
}

main "$@"
